// Code generated by goyacc -o parser.go -v parser.output parser.y. DO NOT EDIT.

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2

//line parser.y:5
type yySymType struct {
	yys         int
	stmnt       []Statement
	statement   Statement
	expression  Expression
	expressions []Expression
	prime       Prime
	identifier  Identifier
	text        String
	integer     Integer
	float       Float
	variable    Variable
	token       Token
}

const ID = 57346
const STRING = 57347
const INTEGER = 57348
const FLOAT = 57349
const BOOLEAN = 57350
const DATETIME = 57351
const VARIABLE = 57352
const SELECT = 57353
const FROM = 57354
const WHERE = 57355
const LIMIT = 57356
const AND = 57357
const OR = 57358
const COMPARISON_OP = 57359

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"ID",
	"STRING",
	"INTEGER",
	"FLOAT",
	"BOOLEAN",
	"DATETIME",
	"VARIABLE",
	"SELECT",
	"FROM",
	"WHERE",
	"LIMIT",
	"AND",
	"OR",
	"COMPARISON_OP",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'('",
	"')'",
	"','",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:279

func SetDebugLevel(level int, verbose bool) {
	yyDebug = level
	yyErrorVerbose = verbose
}

func Parse(s string) ([]Statement, error) {
	l := new(Lexer)
	l.New(s)
	yyParse(l)
	return l.stmnt, l.err
}

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 76

var yyAct = [...]int{
	25, 17, 34, 15, 26, 9, 47, 12, 23, 28,
	29, 31, 37, 36, 27, 23, 28, 29, 31, 29,
	31, 27, 38, 30, 16, 33, 41, 22, 45, 11,
	30, 42, 30, 6, 22, 43, 23, 46, 48, 40,
	39, 38, 50, 51, 52, 49, 54, 29, 53, 36,
	56, 40, 39, 38, 8, 40, 42, 38, 1, 21,
	55, 7, 24, 13, 14, 35, 20, 19, 18, 44,
	32, 10, 5, 4, 3, 2,
}

var yyPact = [...]int{
	22, -1000, 22, -21, -1000, 17, 4, -1000, -1000, -1000,
	12, 32, -1000, -13, -1000, 36, -1000, -1000, -1000, -1000,
	-1000, -1000, 11, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	13, -1000, 14, 11, -1000, -19, 32, 4, 11, 11,
	11, 24, -1000, -1000, -1000, 41, 36, 32, -1000, -1000,
	-1000, 40, 5, -1000, -1000, 41, -1000,
}

var yyPgo = [...]int{
	0, 58, 75, 74, 73, 72, 71, 70, 69, 68,
	3, 67, 66, 65, 64, 63, 2, 7, 1, 62,
	0, 4, 59, 54,
}

var yyR1 = [...]int{
	0, 1, 1, 2, 3, 4, 5, 6, 6, 7,
	7, 8, 8, 9, 9, 9, 10, 10, 10, 10,
	10, 10, 11, 12, 12, 13, 13, 14, 14, 15,
	16, 16, 17, 17, 18, 19, 20, 20, 21, 21,
	22, 23, 23,
}

var yyR2 = [...]int{
	0, 0, 2, 2, 1, 4, 2, 0, 2, 0,
	2, 0, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 1, 2, 1, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 2, 1, 2,
	1, 0, 1,
}

var yyChk = [...]int{
	-1000, -1, -2, -3, -4, -5, 11, -1, -23, 26,
	-6, 12, -17, -15, -14, -10, 20, -18, -9, -11,
	-12, -22, 23, 4, -19, -20, -21, 10, 5, 6,
	19, 7, -7, 13, -16, -13, -18, 25, 17, 16,
	15, -10, -20, -21, -8, 14, -10, 25, -18, -17,
	-10, -10, -10, 24, -20, 19, -16,
}

var yyDef = [...]int{
	1, -2, 1, 41, 4, 7, 0, 2, 3, 42,
	9, 0, 6, 32, 29, 27, 28, 16, 17, 18,
	19, 20, 0, 34, 13, 14, 15, 40, 35, 36,
	0, 38, 11, 0, 8, 30, 25, 0, 0, 0,
	0, 0, 37, 39, 5, 0, 10, 0, 26, 33,
	22, 23, 24, 21, 12, 0, 31,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 22, 3, 3,
	23, 24, 20, 18, 25, 19, 3, 21, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 26,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is Îµ, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:58
		{
			yyVAL.stmnt = nil
			yylex.(*Lexer).stmnt = yyVAL.stmnt
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:63
		{
			yyVAL.stmnt = append([]Statement{yyDollar[1].statement}, yyDollar[2].stmnt...)
			yylex.(*Lexer).stmnt = yyVAL.stmnt
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:70
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:76
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 5:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:82
		{
			yyVAL.expression = SelectReq{
				SelectExpr: yyDollar[1].expression,
				FromExpr:   yyDollar[2].expression,
				WhereExpr:  yyDollar[3].expression,
				LimitExpr:  yyDollar[4].expression,
			}
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:93
		{
			yyVAL.expression = SelectExpr{Select: yyDollar[1].token.Str, Fields: yyDollar[2].expressions}
		}
	case 7:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:99
		{
			yyVAL.expression = nil
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:103
		{
			yyVAL.expression = FromExpr{From: yyDollar[1].token.Str, Tables: yyDollar[2].expressions}
		}
	case 9:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:109
		{
			yyVAL.expression = nil
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:113
		{
			yyVAL.expression = WhereExpr{Where: yyDollar[1].token.Str, Filter: yyDollar[2].expression}
		}
	case 11:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:119
		{
			yyVAL.expression = nil
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:123
		{
			yyVAL.expression = LimitExpr{Limit: yyDollar[1].token.Str, Number: yyDollar[2].integer.Value()}
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:129
		{
			yyVAL.prime = yyDollar[1].text
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:133
		{
			yyVAL.prime = yyDollar[1].integer
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:137
		{
			yyVAL.prime = yyDollar[1].float
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:143
		{
			yyVAL.expression = yyDollar[1].identifier
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:147
		{
			yyVAL.expression = yyDollar[1].prime
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:151
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:155
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:159
		{
			yyVAL.expression = yyDollar[1].variable
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:163
		{
			yyVAL.expression = Parentheses{Expr: yyDollar[2].expression}
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:169
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:175
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:179
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:185
		{
			yyVAL.expression = Table{Object: yyDollar[1].identifier}
		}
	case 26:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:189
		{
			yyVAL.expression = Table{Object: yyDollar[1].identifier, Alias: yyDollar[2].identifier}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:195
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:199
		{
			yyVAL.expression = Asterisk{}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:205
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:211
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:215
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:221
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:225
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:231
		{
			yyVAL.identifier = Identifier{Str: yyDollar[1].token.Str}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:237
		{
			yyVAL.text = NewString(yyDollar[1].token.Str)
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:243
		{
			yyVAL.integer = NewIntegerFromString(yyDollar[1].token.Str)
		}
	case 37:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:247
		{
			i := yyDollar[2].integer.Value() * -1
			yyVAL.integer = NewInteger(i)
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:254
		{
			yyVAL.float = NewFloatFromString(yyDollar[1].token.Str)
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:258
		{
			f := yyDollar[2].float.Value() * -1
			yyVAL.float = NewFloat(f)
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:265
		{
			yyVAL.variable = Variable{Name: yyDollar[1].token.Str}
		}
	case 41:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:271
		{
			yyVAL.token = Token{}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:275
		{
			yyVAL.token = Token{Token: ';', Str: string(';')}
		}
	}
	goto yystack /* stack new state and value */
}
